Que es un algoritmo?
Un algoritmo es un conjunto de instrucciones finitas que nos permiten resolver un problema dado paso a paso y sin generar ambigüedades. Cuando se nos presenta un problema, y nos ponemos a resolver el mismo de manera secuencial, ordenada, y con pasos bien definidos, estamos hablando de un algoritmo, entendiéndose este como una forma de solucionar eventualidades, de manera metódica, un ejemplo claro de esto, son las recetas, las cuales nos ilustran como preparar un determinado plato, en base a una serie de instrucciones, precisas y concisas.

Lenguajes de Programacion
- Lenguaje Maquina : Codigo binario o hexadecimal directamente interpretados por el microprocesador de el computador difíciles de leer para una persona.
Lenguaje Ensamblador : Expresa las instrucciones que queremos darle al microprocesador de una forma mas natural para la persona y a la vez mas cercana a la maquina.
Lenguajes de Bajo Nivel : Lenguajes cuyas interpretaciones están mas cerca al lenguaje maquina permitiendo tener una mayor interacción y velocidad con el hardware ej: C , C++.
Lenguajes de Alto Nivel : Lenguajes con instrucciones mas fáciles de escribir y leer para una persona que requieren interpretes para convertirse en lenguaje maquina ej: Ruby , Python , JavaScript.
- Las computadoras trabajan con 0 y 1, donde los transistores pueden tener diferentes estados por ser materiales semi conductores. Esto es utilizado por medio de electrónica para que los circuitos combinen y puedan funcionar haciendo operaciones.
Si tratamos de ver desde el procesador las operaciones que se ejecutan en la computadora, sería nada comprensible, tendríamos que hacer una serie de códigos binarios y hexadecimales (lenguaje máquina) que hoy en día ya nadie hace.
El lenguaje ensamblador lo proporciona el fabricante del microcontrolador.
El chip de un Arduino se puede programar todavía con un ensamblador.
Entre más bajo se el nivel de un lenguaje de programación, más directo va a ser para trabajar con el Hardware.
Los lenguajes de alto nivel permiten a los programadores tener una interacción mucho más fácil con equipos, son lenguajes que son mucho más parecidos al inglés.
Los lenguajes de alto nivel están muy alejados del Hardware, por lo que casi siempre van a contar con un intérprete que se va a encargar de traducirlo al lenguaje ensamblador o al código máquina, que va a ser el código final que se va a ejecutar en nuestros equipos.
- Los lenguajes de programación son el método por antonomasia, para indicarle a la computadora la manera en que debe realizar una actividad, es decir es una herramienta que nos permite aplicar un algoritmo determinado para la solución de un problema. Existen en el mundo una gran cantidad de estos lenguajes, y es un campo que esta constante evolución, por lo que suele clasificarse en lenguajes de bajo nivel, y lenguajes de alto nivel, siendo los primeros los que interaccionan con el hardware del equipo, y los segundos los que interaccionan con los humanos; cada uno de ellos esta dotado de reglas sintácticas y semánticas como todo lenguaje, que posibilita una comunicación más efectiva, en torno a los ecosistemas que se han formado alrededor de la revolución del computador.

Elementos de un algoritmo
- Existen lenguajes de programación que no son tipados, es decir, no van a tener ningún tipo de dato dentro de su estructura.
Lo que sucede con un lenguaje de programación que no tiene tipo de datos es que no va a ser tan fácil optimizar el uso de recursos.
Las constantes las podemos utilizar siempre que vayamos a tener un dato que nunca va a cambiar de forma sistemática.
En las variables vamos a poder almacenar números cuyo valor va a estar constantemente variando.
Lenguaje Tipado: Son específicamente definidos para el tipo de dato que estamos especificando: Números, texto, string, array, etc.
Lenguaje No Tipado: El dato puede ser interpretado como un tipo de dato u otro dependiendo del contexto o la instrucción. Por ejemplo, un número podría ser texto o número dependiendo de la instrucción.
- Los elementos de un algoritmo:
	1. datos
	2. instrucciones o comandos
	3. operadores

User defined data types: Estructuras de datos y custom data types
- En algunas ocasiones, cuando estamos programando, no nos basta con los tipos de datos definidos por el lenguaje previamente, para esto podemos ir definiendo nosotros un tipo de dato propio que vayamos a estar usando en nuestro proyecto.
Ejemplo: En el lenguaje de programación de Java , esto se conoce como clases. Así mismo en el lenguaje de C++ o C se conoce como estructuras.
- Razones por las que podemos crear nuestro propio tipo de dato:
Se tiene mucha más flexibilidad en el proyecto.
Permite tener un mejor uso de memoria, porque estamos definiendo al programa una serie de pasos en los que no va a tener que procesar nada.
- ¿Qué son las estructuras de datos?
Las estructuras de datos son una manera eficiente de organizar y almacenar la información que estamos recibiendo.
- Estructuras de datos comunes:
	Listas
	Arreglos
	Listas ordenadas
	Árboles
Tipos de datos abstractos = Tipo de datos definido por el usuario con un operador que se va a utilizar en aplicaciones.

Resolucion del problema
- Metodología para construir un algoritmo: 
	1. Definición del problema.
	2. Análisis del problema.
	3. Diseño del algoritmo.
	4. Verificación o pruebas.
- Metodología para extraer los datos del problema:
Entrada ¿Qué se necesita para realizar los pasos?
Salida ¿ Qué se obtiene al final del algoritmo?
Tipos de datos. Pueden ser:
	a) Números: Reales, enteros, complejos.
	b) Textos: Letras, palabras, frases.
	c) Otros.
- Pseudocódigos = Son representaciones en nuestro lenguaje natural de los pasos a seguir. Son una etapa intermedia para que podamos llevar nuestro algoritmo a cualquier lenguaje de programación.

El porqué del análisis de algoritmos
- El Análisis es parte fundamental del desarrollo de sistemas, apps, etc. Siempre que se hace un Análisis adecuado, bien hecho, el tiempo que se invierte posteriormente en el prototipado, codificación, pruebas y revisión es menor y los cambios requeridos casi siempre son mucho menores. Cuando no se hace un Análisis correcto, antes de empezar un desarrollo, el costo posterior de ensayos y error, de pruebas, re-definición de alcances y re-programación de código es mucho mayor.
- Análisis en tiempo de ejecución = Es encontrar la relación que existe entre la entrada que estamos proporcionando a nuestros algoritmo y el tiempo que va a tardar éste en darle la solución al problema.

Estructuras de control y estructuras de control secuenciales
- Nos van a permitir definir el flujo de nuestro programa 
- Tipos de Estructuras de Control:
	1. Secuenciales
	2. Selectivas
	3. Repetitivas
- Estructuras Secuenciales:
Son las más básicas, funciona como su nombre lo dice, en secuencia. El programa ejecuta los pasos ordenadamente uno tras otro hasta obtener el resultado y termina.
- Estructuras selectivas:
Nos van a permitir que nuestro algoritmo o el programa tome decisiones en el caso de ejecutar un pedazo de código o un segmento de código o no con base en una condición específica que debemos verificar si se cumple, y si se cumple ejecutamos la condición y si no, se va colocando lo siguiente de nuestro código.
	1. Si, if. Aquí vamos a tener una condición, y en caso de que la condición se cumpla vamos a ejecutar un pedazo de código. En caso de que la condición no se cumpla vamos a saltar ese pedazo de código.
	2. Si - sino, if - else. Nos permite una condición y bifurcar el camino para dos rutas distintas, es decir, si la condición se cumple, ejecutamos una acción y si la condición no se cumple ejecutamos otra acción diferente.
	3. Si, sino entonces… sino, If, else if, else. Aquí vamos a poder verificar la primera condición, en caso de que esta primera no se cumpla, podemos verificar una segunda condición y en caso de que esta segunda no se cumpla, podemos tener n condiciones. Si este número n que hayamos determinado no se cumplen, al final se ejecutará else (sino).
	Estructuras de selección múltiple = Estas estructuras nos van a permitir concatenar tomas de decisiones y al final tener una decisión estándar en el caso de que no haya entrado en ninguna de las condiciones.
Estructuras repetitivas:
Estás nos van a permitir crear bucles donde nuestros programas va a estar repitiéndose hasta que una condición les indique lo contrario o mientras una condición les indique que hagamos eso.
	1. Mientras, while. Mientras una condición se cumpla, nosotros vamos a ejecutar todo el código que está dentro de este ciclo y vamos a repetirlo.
	2. Haz mientras, do while. Esta instrucción nos permite entrar por lo menos una vez a ejecutar el código que está dentro de esta instrucción y si la condición se cumple , entonces repetimos, pero si la condición no se cumple salimos del código.
	3. Para, for. Se utiliza cuando necesitamos repetir una serie de veces definida un código.
	La diferencia de un “mientras” y un “haz mientras” es que el “haz mientras” se va a ejecutar por lo menos una vez y el “mientras” no necesariamente se va a ejecutar, si la condición no se está cumpliendo no va a entrar ni una vez a ese código y lo saltaría.

Introduccion al Lenguaje C
- Notas:
El lenguaje C fue una revolución en su época ya que en ese entonces se utilizaba todavía el lenguaje ensamblador para acceder al lenguaje máquina o para trabajar directamente con el hardware.
Lo increíble de este lenguaje era que tenía la capacidad de trabajar a nivel hardware y además estaba optimizado pues era un lenguaje de alto nivel.
El lenguaje es hoy en día todavía el lenguaje de programación más utilizado en sistemas embebidos y en sistemas de bajos recursos de hardware donde necesitamos el acceso al hardware y donde se necesita tener muy alto rendimiento.
El lenguaje C tardó varios años en estandarizarse.
Un estándar en C significa una serie de guías y directivas que se deben de seguir al momento de escribir tu código que están respaldadas por una asociación (ANSI).
La programación estructurada es un método de programación o un paradigma que dice que vamos a ejecutar el código de forma secuencial, línea tras línea, del inicio al fin.
C es un lenguaje de programación compilado.
C es un lenguaje tipado.
- Características importantes de C:
Núcleo del lenguaje simple que opera con bibliotecas.
Lenguaje flexible que soporta la programación.
Acceso a memoria de bajo nivel con punteros.
Utiliza un conjunto reducido de palabras clave.
Pasaje de parámetros por valor y referencia.